# Generated by cloudcoil-model-codegen v0.2.1
# DO NOT EDIT

from __future__ import annotations

from typing import Annotated, Callable, Dict, List, Literal, Optional, Type, Union

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import BaseBuilder, BaseModel, GenericListBuilder, Self
from cloudcoil.resources import Resource


class EventSource(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["EventSource"]:
            return EventSource

        def build(self) -> "EventSource":
            return EventSource(**self._attrs)

        def api_version(self, value: Optional[str]) -> Self:
            return self._set("api_version", value)

        def kind(
            self,
            value: Literal[
                "Bucket",
                "GitRepository",
                "Kustomization",
                "HelmRelease",
                "HelmChart",
                "HelmRepository",
                "ImageRepository",
                "ImagePolicy",
                "ImageUpdateAutomation",
                "OCIRepository",
            ],
        ) -> Self:
            return self._set("kind", value)

        def match_labels(self, value: Optional[Dict[str, str]]) -> Self:
            return self._set("match_labels", value)

        def name(self, value: str) -> Self:
            return self._set("name", value)

        def namespace(self, value: Optional[str]) -> Self:
            return self._set("namespace", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["EventSource", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use EventSource.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[str],
        Field(alias="apiVersion", description="API version of the referent"),
    ] = None
    kind: Annotated[
        Literal[
            "Bucket",
            "GitRepository",
            "Kustomization",
            "HelmRelease",
            "HelmChart",
            "HelmRepository",
            "ImageRepository",
            "ImagePolicy",
            "ImageUpdateAutomation",
            "OCIRepository",
        ],
        Field(description="Kind of the referent"),
    ]
    match_labels: Annotated[
        Optional[Dict[str, str]],
        Field(
            alias="matchLabels",
            description='MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is "key", the\noperator is "In", and the values array contains only "value". The requirements are ANDed.\nMatchLabels requires the name to be set to `*`.',
        ),
    ] = None
    name: Annotated[
        str,
        Field(
            description="Name of the referent\nIf multiple resources are targeted `*` may be set.",
            max_length=53,
            min_length=1,
        ),
    ]
    namespace: Annotated[
        Optional[str],
        Field(description="Namespace of the referent", max_length=53, min_length=1),
    ] = None


class ProviderRef(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["ProviderRef"]:
            return ProviderRef

        def build(self) -> "ProviderRef":
            return ProviderRef(**self._attrs)

        def name(self, value: str) -> Self:
            return self._set("name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["ProviderRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ProviderRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: Annotated[str, Field(description="Name of the referent.")]


class AlertSpec(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["AlertSpec"]:
            return AlertSpec

        def build(self) -> "AlertSpec":
            return AlertSpec(**self._attrs)

        def event_metadata(self, value: Optional[Dict[str, str]]) -> Self:
            return self._set("event_metadata", value)

        def event_severity(self, value: Optional[Literal["info", "error"]]) -> Self:
            return self._set("event_severity", value)

        def event_sources(
            self,
            value_or_callback: Union[
                List[EventSource],
                Callable[
                    [GenericListBuilder[EventSource, EventSource.Builder]],
                    GenericListBuilder[EventSource, EventSource.Builder],
                ],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(EventSource.list_builder()).build()
            return self._set("event_sources", value)

        def exclusion_list(self, value: Optional[List[str]]) -> Self:
            return self._set("exclusion_list", value)

        def inclusion_list(self, value: Optional[List[str]]) -> Self:
            return self._set("inclusion_list", value)

        def provider_ref(
            self,
            value_or_callback: Union[
                ProviderRef, Callable[[ProviderRef.Builder], ProviderRef.Builder]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ProviderRef.builder()).build()
            return self._set("provider_ref", value)

        def summary(self, value: Optional[str]) -> Self:
            return self._set("summary", value)

        def suspend(self, value: Optional[bool]) -> Self:
            return self._set("suspend", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["AlertSpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use AlertSpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    event_metadata: Annotated[
        Optional[Dict[str, str]],
        Field(
            alias="eventMetadata",
            description="EventMetadata is an optional field for adding metadata to events dispatched by the\ncontroller. This can be used for enhancing the context of the event. If a field\nwould override one already present on the original event as generated by the emitter,\nthen the override doesn't happen, i.e. the original value is preserved, and an info\nlog is printed.",
        ),
    ] = None
    event_severity: Annotated[
        Optional[Literal["info", "error"]],
        Field(
            alias="eventSeverity",
            description="EventSeverity specifies how to filter events based on severity.\nIf set to 'info' no events will be filtered.",
        ),
    ] = "info"
    event_sources: Annotated[
        List[EventSource],
        Field(
            alias="eventSources",
            description="EventSources specifies how to filter events based\non the involved object kind, name and namespace.",
        ),
    ]
    exclusion_list: Annotated[
        Optional[List[str]],
        Field(
            alias="exclusionList",
            description="ExclusionList specifies a list of Golang regular expressions\nto be used for excluding messages.",
        ),
    ] = None
    inclusion_list: Annotated[
        Optional[List[str]],
        Field(
            alias="inclusionList",
            description="InclusionList specifies a list of Golang regular expressions\nto be used for including messages.",
        ),
    ] = None
    provider_ref: Annotated[
        ProviderRef,
        Field(
            alias="providerRef",
            description="ProviderRef specifies which Provider this Alert should use.",
        ),
    ]
    summary: Annotated[
        Optional[str],
        Field(
            description="Summary holds a short description of the impact and affected cluster.",
            max_length=255,
        ),
    ] = None
    suspend: Annotated[
        Optional[bool],
        Field(
            description="Suspend tells the controller to suspend subsequent\nevents handling for this Alert."
        ),
    ] = None


class CertSecretRef(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["CertSecretRef"]:
            return CertSecretRef

        def build(self) -> "CertSecretRef":
            return CertSecretRef(**self._attrs)

        def name(self, value: str) -> Self:
            return self._set("name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["CertSecretRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use CertSecretRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: Annotated[str, Field(description="Name of the referent.")]


class SecretRef(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["SecretRef"]:
            return SecretRef

        def build(self) -> "SecretRef":
            return SecretRef(**self._attrs)

        def name(self, value: str) -> Self:
            return self._set("name", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["SecretRef", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use SecretRef.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    name: Annotated[str, Field(description="Name of the referent.")]


class ProviderSpec(BaseModel):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["ProviderSpec"]:
            return ProviderSpec

        def build(self) -> "ProviderSpec":
            return ProviderSpec(**self._attrs)

        def address(self, value: Optional[str]) -> Self:
            return self._set("address", value)

        def cert_secret_ref(
            self,
            value_or_callback: Union[
                Optional[CertSecretRef],
                Callable[[CertSecretRef.Builder], CertSecretRef.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(CertSecretRef.builder()).build()
            return self._set("cert_secret_ref", value)

        def channel(self, value: Optional[str]) -> Self:
            return self._set("channel", value)

        def interval(self, value: Optional[str]) -> Self:
            return self._set("interval", value)

        def proxy(self, value: Optional[str]) -> Self:
            return self._set("proxy", value)

        def secret_ref(
            self,
            value_or_callback: Union[
                Optional[SecretRef], Callable[[SecretRef.Builder], SecretRef.Builder]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(SecretRef.builder()).build()
            return self._set("secret_ref", value)

        def suspend(self, value: Optional[bool]) -> Self:
            return self._set("suspend", value)

        def timeout(self, value: Optional[str]) -> Self:
            return self._set("timeout", value)

        def type(
            self,
            value: Literal[
                "slack",
                "discord",
                "msteams",
                "rocket",
                "generic",
                "generic-hmac",
                "github",
                "gitlab",
                "gitea",
                "bitbucketserver",
                "bitbucket",
                "azuredevops",
                "googlechat",
                "googlepubsub",
                "webex",
                "sentry",
                "azureeventhub",
                "telegram",
                "lark",
                "matrix",
                "opsgenie",
                "alertmanager",
                "grafana",
                "githubdispatch",
                "pagerduty",
                "datadog",
                "nats",
            ],
        ) -> Self:
            return self._set("type", value)

        def username(self, value: Optional[str]) -> Self:
            return self._set("username", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["ProviderSpec", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ProviderSpec.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    address: Annotated[
        Optional[str],
        Field(
            description="Address specifies the endpoint, in a generic sense, to where alerts are sent.\nWhat kind of endpoint depends on the specific Provider type being used.\nFor the generic Provider, for example, this is an HTTP/S address.\nFor other Provider types this could be a project ID or a namespace.",
            max_length=2048,
        ),
    ] = None
    cert_secret_ref: Annotated[
        Optional[CertSecretRef],
        Field(
            alias="certSecretRef",
            description="CertSecretRef specifies the Secret containing\na PEM-encoded CA certificate (in the `ca.crt` key).\n\nNote: Support for the `caFile` key has\nbeen deprecated.",
        ),
    ] = None
    channel: Annotated[
        Optional[str],
        Field(
            description="Channel specifies the destination channel where events should be posted.",
            max_length=2048,
        ),
    ] = None
    interval: Annotated[
        Optional[str],
        Field(
            description="Interval at which to reconcile the Provider with its Secret references.\nDeprecated and not used in v1beta3.",
            pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
        ),
    ] = None
    proxy: Annotated[
        Optional[str],
        Field(
            description="Proxy the HTTP/S address of the proxy server.",
            max_length=2048,
            pattern="^(http|https)://.*$",
        ),
    ] = None
    secret_ref: Annotated[
        Optional[SecretRef],
        Field(
            alias="secretRef",
            description="SecretRef specifies the Secret containing the authentication\ncredentials for this Provider.",
        ),
    ] = None
    suspend: Annotated[
        Optional[bool],
        Field(
            description="Suspend tells the controller to suspend subsequent\nevents handling for this Provider."
        ),
    ] = None
    timeout: Annotated[
        Optional[str],
        Field(
            description="Timeout for sending alerts to the Provider.",
            pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m))+$",
        ),
    ] = None
    type: Annotated[
        Literal[
            "slack",
            "discord",
            "msteams",
            "rocket",
            "generic",
            "generic-hmac",
            "github",
            "gitlab",
            "gitea",
            "bitbucketserver",
            "bitbucket",
            "azuredevops",
            "googlechat",
            "googlepubsub",
            "webex",
            "sentry",
            "azureeventhub",
            "telegram",
            "lark",
            "matrix",
            "opsgenie",
            "alertmanager",
            "grafana",
            "githubdispatch",
            "pagerduty",
            "datadog",
            "nats",
        ],
        Field(description="Type specifies which Provider implementation to use."),
    ]
    username: Annotated[
        Optional[str],
        Field(
            description="Username specifies the name under which events are posted.",
            max_length=2048,
        ),
    ] = None


class Alert(Resource):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["Alert"]:
            return Alert

        def build(self) -> "Alert":
            return Alert(**self._attrs)

        def api_version(
            self, value: Optional[Literal["notification.toolkit.fluxcd.io/v1beta3"]]
        ) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["Alert"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[apimachinery.ObjectMeta.Builder], apimachinery.ObjectMeta.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta.builder()).build()
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[
                Optional[AlertSpec], Callable[[AlertSpec.Builder], AlertSpec.Builder]
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(AlertSpec.builder()).build()
            return self._set("spec", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["Alert", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Alert.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["notification.toolkit.fluxcd.io/v1beta3"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "notification.toolkit.fluxcd.io/v1beta3"
    kind: Annotated[
        Optional[Literal["Alert"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "Alert"
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: Optional[AlertSpec] = None


class Provider(Resource):
    class Builder(BaseBuilder):
        @property
        def base_class(self) -> Type["Provider"]:
            return Provider

        def build(self) -> "Provider":
            return Provider(**self._attrs)

        def api_version(
            self, value: Optional[Literal["notification.toolkit.fluxcd.io/v1beta3"]]
        ) -> Self:
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["Provider"]]) -> Self:
            return self._set("kind", value)

        def metadata(
            self,
            value_or_callback: Union[
                Optional[apimachinery.ObjectMeta],
                Callable[[apimachinery.ObjectMeta.Builder], apimachinery.ObjectMeta.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(apimachinery.ObjectMeta.builder()).build()
            return self._set("metadata", value)

        def spec(
            self,
            value_or_callback: Union[
                Optional[ProviderSpec],
                Callable[[ProviderSpec.Builder], ProviderSpec.Builder],
            ],
        ) -> Self:
            value = value_or_callback
            if callable(value_or_callback):
                value = value_or_callback(ProviderSpec.builder()).build()
            return self._set("spec", value)

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    class ListBuilder(GenericListBuilder["Provider", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Provider.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[
        Optional[Literal["notification.toolkit.fluxcd.io/v1beta3"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "notification.toolkit.fluxcd.io/v1beta3"
    kind: Annotated[
        Optional[Literal["Provider"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "Provider"
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: Optional[ProviderSpec] = None
